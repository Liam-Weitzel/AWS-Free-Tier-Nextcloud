AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS environment setup with EC2, RDS, ElastiCache, S3, and secure networking components.'

Parameters:
  PublicSubnetName:
    Type: String
    Default: 'MyPublicSubnet'
  PrivateSubnetName:
    Type: String
    Default: 'MyPrivateSubnet'
  EC2RootVolumeSize:
    Type: Number
    Default: 8
  EC2InstanceClass:
    Type: String
    Default: 'db.t2.micro'
  DBInstanceName:
    Type: String
    Default: 'MyDatabase'
  DBInstanceClass:
    Type: String
    Default: 'db.t2.micro'
  DBEngine:
    Type: String
    Default: 'postgres'
  MasterPassword:
    Type: String
    NoEcho: true
  MasterUsername:
    Type: String
    Default: 'admin'
  VPCName:
    Type: String
    Default: 'MyVPC'
  IGWName:
    Type: String
    Default: 'MyInternetGateway'
  NATGWName:
    Type: String
    Default: 'MyNATGateway'
  EC2InstanceName:
    Type: String
    Default: 'MyEC2Instance'
  ImageID:
    Type: String
    Default: 'ami-07e60ac1f43c330bd'
  AMIRootDeviceName:
    Type: String
    Default: '/dev/sda1'
  KeyName:
    Type: String
  S3BucketName:
    Type: String
    Default: 'my-unique-bucket-name-12345'
  RedisInstanceClass:
    Type: String
    Default: 'cache.t2.micro'

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IGWName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetName

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnetName

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment

  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EC2 instance to access RDS and S3"
      VpcId: !Ref MyVPC

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS instance, accessible only by EC2 instance"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for RDS Instance"
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EC2InstanceName
      ImageId: !Ref ImageID
      InstanceType: !Ref EC2InstanceClass
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: !Ref AMIRootDeviceName
          Ebs:
            VolumeSize: !Ref EC2RootVolumeSize

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBInstanceName
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  MyElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "ElastiCache Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet

  MyElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: !Ref RedisInstanceClass
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref MyElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup  # Assuming similar access patterns as RDS

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

Outputs:
  EC2InstancePublicIP:
    Description: "Public IP of the EC2 Instance"
    Value: !GetAtt MyEC2Instance.PublicIp
  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref MyS3Bucket
  DBInstanceEndpoint:
    Description: "Database Endpoint"
    Value: !GetAtt MyDBInstance.Endpoint.Address
  RedisEndpoint:
    Description: "ElastiCache Redis Endpoint"
    Value: !GetAtt MyElastiCacheCluster.RedisEndpoint.Address
