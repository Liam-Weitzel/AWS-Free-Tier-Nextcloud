AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS environment setup with EC2, RDS, ElastiCache, S3, and secure networking components.'

Parameters:
  PublicSubnetName:
    Type: String
    Default: 'MyPublicSubnet'
  PrivateSubnetName:
    Type: String
    Default: 'MyPrivateSubnet'
  EC2RootVolumeSize:
    Type: Number
    Default: 30
  EC2InstanceClass:
    Type: String
    Default: 't2.micro'
  DBInstanceName:
    Type: String
    Default: 'MyDatabase'
  DBInstanceClass:
    Type: String
    Default: 'db.t4g.micro'
  DBEngine:
    Type: String
    Default: 'postgres'
  DBEngineVersion:
    Type: String
    Default: '16.2'
  DBAllocatedStorage:
    Type: Number
    Default: 20
  MasterPassword:
    Type: String
    NoEcho: true
  MasterUsername:
    Type: String
    Default: 'ncadmin'
  VPCName:
    Type: String
    Default: 'MyVPC'
  IGWName:
    Type: String
    Default: 'MyInternetGateway'
  NATGWName:
    Type: String
    Default: 'MyNATGateway'
  EC2InstanceName:
    Type: String
    Default: 'MyEC2Instance'
  ImageID:
    Type: String
    Default: 'ami-0183b16fc359a89dd'
  AMIRootDeviceName:
    Type: String
    Default: '/dev/xvda'
  KeyName:
    Type: String
    Default: 'Nextcloud'
  S3BucketName:
    Type: String
    Default: 'my-unique-bucket-name-12345'
  RedisInstanceClass:
    Type: String
    Default: 'cache.t2.micro'
  NextCloudVersion:
    Type: String
    Default: 'latest'

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IGWName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref PrivateSubnetName, "1"]]


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref PrivateSubnetName, "2"]]

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment

  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH, HTTP, and HTTPS to EC2 instance"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow PostgreSQL traffic from EC2 instance"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Redis traffic from EC2 instance"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for RDS Instance"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EC2InstanceName
      ImageId: !Ref ImageID
      InstanceType: !Ref EC2InstanceClass
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: !Ref AMIRootDeviceName
          Ebs:
            VolumeSize: !Ref EC2RootVolumeSize
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install docker -y
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo docker pull nextcloud:${NextCloudVersion}
          mkdir nextcloud
          sudo docker run -d \
          -e POSTGRES_DB="${DBInstanceName}" \
          -e POSTGRES_USER="${MasterUsername}" \
          -e POSTGRES_PASSWORD="${MasterPassword}" \
          -e POSTGRES_HOST="${MyDBInstance.Endpoint.Address}" \
          -e OBJECTSTORE_S3_BUCKET="${MyS3Bucket}" \
          -e OBJECTSTORE_S3_REGION="${AWS::Region}" \
          -e OBJECTSTORE_S3_KEY="${BucketUserCredentials}" \
          -e OBJECTSTORE_S3_SECRET="${BucketUserCredentials.SecretAccessKey}" \
          -e REDIS_HOST="${MyElastiCacheCluster.RedisEndpoint.Address}" \
          -e REDIS_PORT="${MyElastiCacheCluster.RedisEndpoint.Port}" \
          -p 80:80 --mount src="/nextcloud",target="/var/www/html",type=bind nextcloud:${NextCloudVersion}

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBInstanceName
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp2
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  MyElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "ElastiCache Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  MyElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: !Ref RedisInstanceClass
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref MyElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup

  MyS3Bucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  BucketUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: s3-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: !Sub arn:aws:s3:::${MyS3Bucket}
          - Effect: Allow
            Action:
            - s3:*
            Resource: !Sub arn:aws:s3:::${MyS3Bucket}/*
          - Effect: Deny
            Action:
            - s3:DeleteBucket*
            - s3:PutBucketPolicy
            - s3:PutEncryptionConfiguration
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:GetBucketLocation
            Resource: arn:aws:s3:::*

  BucketUserCredentials:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: 1
      Status: Active
      UserName: !Ref BucketUser

  PublicSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC

  InboundPublicNACLRule: 
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  OutboundPublicNACLRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PublicSubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicSubnetNACL

  PrivateSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC

  InboundRDSTrafficRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.1.0/24
      PortRange:
        From: 5432
        To: 5432

  InboundRedisTrafficRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.1.0/24
      PortRange:
        From: 6379
        To: 6379

  OutboundPrivateSubnetRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNACL
      RuleNumber: 200
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PrivateSubnet1NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateSubnetNACL

  PrivateSubnet2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateSubnetNACL

Outputs:
  EC2InstancePublicIP:
    Description: "Public IP of the EC2 Instance"
    Value: !GetAtt MyEC2Instance.PublicIp
  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref MyS3Bucket
  DBInstanceEndpoint:
    Description: "Database Endpoint"
    Value: !GetAtt MyDBInstance.Endpoint.Address
  RedisEndpoint:
    Description: "ElastiCache Redis Endpoint"
    Value: !GetAtt MyElastiCacheCluster.RedisEndpoint.Address
